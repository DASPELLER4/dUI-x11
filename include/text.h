#ifndef TEXT_H
#define TEXT_H

#include <stdbool.h>
#include <string.h>
#include <stdint.h>
#include <stdlib.h>
#include <X11/Xutil.h>
#include <X11/Xlib.h>

#include "color_macros.h"

#define TEXT_S 1
#define TEXT_M 2
#define TEXT_L 4

typedef struct{
	int type;
	XImage *ximage;
	int x;
	int y;
	int pxwidth;
	int pxheight;
	bool visible;
	bool focused; // not used for text
	bool display;
	void (*onClick)();
	void (*onKeypress)(char); // ==
	void (*onHover)();
	char fgColor[3];
	char bgColor[3];
	int fontSize;
	int kerning;
	char *text;
	char *textbuffer;
	int byteWidth;
	int bpp;
	long subpixelOrder;
} text_t;

const uint8_t ascii[256][8] = {{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x66,0xff,0xff,0x66,0x66,0xff,0xff,0x66},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x18,0x38,0x70,0x60,0x60,0x70,0x38,0x18},
{0x18,0x1c,0xe,0x6,0x6,0xe,0x1c,0x18},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x0,0x0,0x0,0x0,0x18,0x18,0x8,0x10},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x18},
{0xe,0xe,0x1c,0x1c,0x38,0x38,0x70,0x70},
{0x3c,0x7e,0x66,0x6e,0x76,0x66,0x7e,0x3c},
{0x38,0x78,0x78,0x18,0x18,0x18,0x7e,0x7e},
{0x3e,0xff,0xc3,0x7,0x1e,0x78,0xff,0xff},
{0x7e,0xff,0xc3,0x3,0xe,0xc3,0xff,0x7e},
{0x1e,0x3e,0x76,0xe6,0xff,0xff,0x6,0x6},
{0xff,0x80,0xfc,0xfe,0x3,0x83,0xff,0x7e},
{0x7e,0xc1,0xc1,0xfc,0xff,0xc3,0xff,0x7e},
{0xff,0xff,0x3,0x7,0xe,0x1c,0x38,0x70},
{0x3c,0x7e,0x62,0x3c,0x62,0xc1,0xe1,0x7e},
{0x7e,0xff,0xc3,0xff,0x7f,0x3,0x3,0x3},
{0x0,0x18,0x18,0x0,0x0,0x18,0x18,0x0},
{0x18,0x18,0x0,0x0,0x18,0x18,0x8,0x10},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x0,0x7e,0x7e,0x0,0x0,0x7e,0x7e,0x0},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x7e,0x66,0xe,0x1c,0x18,0x0,0x18,0x18},
{0x3c,0x66,0xda,0xa6,0xa6,0xbd,0xc3,0x7e},
{0x3c,0x3c,0x66,0x66,0x7e,0xff,0xc3,0xc3},
{0xfc,0xc6,0xc6,0xfc,0xfe,0xc3,0xc7,0xfe},
{0x7e,0xff,0xc3,0xc0,0xc0,0xc3,0xff,0x7e},
{0xfc,0xfe,0xc7,0xc3,0xc3,0xc3,0xff,0xfe},
{0xff,0xc0,0xc0,0xff,0xc0,0xc0,0xff,0xff},
{0xff,0xff,0xc0,0xc0,0xff,0xc0,0xc0,0xc0},
{0x7e,0xc3,0xc1,0xc0,0xc7,0xc3,0xff,0x7e},
{0xc3,0xc3,0xc3,0xc3,0xff,0xff,0xc3,0xc3},
{0xff,0xff,0x18,0x18,0x18,0x18,0xff,0xff},
{0xff,0xff,0x1,0x1,0x3,0xc3,0xff,0x7c},
{0xc1,0xc6,0xd8,0xe0,0xf8,0xfe,0xc7,0xc3},
{0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xff,0xff},
{0xc3,0xe7,0xff,0xdb,0xdb,0xdb,0xc3,0xc3},
{0xe3,0xe3,0xd3,0xd3,0xcb,0xcb,0xc7,0xc7},
{0x7e,0xff,0xc3,0xc3,0xc3,0xc3,0xff,0x7e},
{0xfe,0xff,0xc3,0xc3,0xff,0xfe,0xc0,0xc0},
{0x7c,0xfe,0xc6,0xc6,0xd6,0xce,0xfe,0x7d},
{0xfc,0xc6,0xc2,0xc6,0xfc,0xf0,0xcc,0xc2},
{0x7f,0xff,0xc0,0xf0,0x7e,0x1f,0xff,0xfe},
{0xff,0xff,0x18,0x18,0x18,0x18,0x18,0x18},
{0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xff,0x7e},
{0xc3,0xc3,0xc3,0x66,0x66,0x66,0x3c,0x18},
{0xc3,0xc3,0xdb,0xdb,0xdb,0xff,0xff,0x66},
{0xc3,0xe7,0x66,0x3c,0x18,0x7e,0xe7,0xc3},
{0xc3,0xc3,0xc3,0x66,0x66,0x18,0x18,0x18},
{0xff,0xff,0x6,0x1c,0x38,0x60,0xff,0xff},
{0x3c,0x3c,0x30,0x30,0x30,0x30,0x3c,0x3c},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x3c,0x3c,0xc,0xc,0xc,0xc,0x3c,0x3c},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x0,0x0,0x0,0x0,0x0,0x0,0xff,0xff},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x3c,0x3c,0x66,0x66,0x7e,0xff,0xc3,0xc3},
{0xfc,0xc6,0xc6,0xfc,0xfe,0xc3,0xc7,0xfe},
{0x7e,0xff,0xc3,0xc0,0xc0,0xc3,0xff,0x7e},
{0xfc,0xfe,0xc7,0xc3,0xc3,0xc3,0xff,0xfe},
{0xff,0xc0,0xc0,0xff,0xc0,0xc0,0xff,0xff},
{0xff,0xff,0xc0,0xc0,0xff,0xc0,0xc0,0xc0},
{0x7e,0xc3,0xc1,0xc0,0xc7,0xc3,0xff,0x7e},
{0xc3,0xc3,0xc3,0xc3,0xff,0xff,0xc3,0xc3},
{0xff,0xff,0x18,0x18,0x18,0x18,0xff,0xff},
{0xff,0xff,0x1,0x1,0x3,0xc3,0xff,0x7c},
{0xc1,0xc6,0xd8,0xe0,0xf8,0xfe,0xc7,0xc3},
{0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xff,0xff},
{0xc3,0xe7,0xff,0xdb,0xdb,0xdb,0xc3,0xc3},
{0xe3,0xe3,0xd3,0xd3,0xcb,0xcb,0xc7,0xc7},
{0x7e,0xff,0xc3,0xc3,0xc3,0xc3,0xff,0x7e},
{0xfe,0xff,0xc3,0xc3,0xff,0xfe,0xc0,0xc0},
{0x7c,0xfe,0xc6,0xc6,0xd6,0xce,0xfe,0x7d},
{0xfc,0xc6,0xc2,0xc6,0xfc,0xf0,0xcc,0xc2},
{0x7f,0xff,0xc0,0xf0,0x7e,0x1f,0xff,0xfe},
{0xff,0xff,0x18,0x18,0x18,0x18,0x18,0x18},
{0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xff,0x7e},
{0xc3,0xc3,0xc3,0x66,0x66,0x66,0x3c,0x18},
{0xc3,0xc3,0xdb,0xdb,0xdb,0xff,0xff,0x66},
{0xc3,0xe7,0x66,0x3c,0x18,0x7e,0xe7,0xc3},
{0xc3,0xc3,0xc3,0x66,0x66,0x18,0x18,0x18},
{0xff,0xff,0x6,0x1c,0x38,0x60,0xff,0xff},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc},
{0x33,0x33,0xcc,0xcc,0x33,0x33,0xcc,0xcc}};

void _writeTextElement(text_t *returnText, int x, int y, char *text, int fontSize, char fg[3], char bg[3], Display *display){
	XVisualInfo visualTemplate;
	XVisualInfo *visualInfo;
	visualTemplate.screen = DefaultScreen(display);
	int number;
	visualInfo = XGetVisualInfo(display, VisualScreenMask, &visualTemplate, &number);
	returnText->subpixelOrder = (*visualInfo).red_mask == 0xFF0000 ? 0 : // RGB
                         (*visualInfo).red_mask == 0x00FF00 ? 1 : // GBR
                         (*visualInfo).red_mask == 0x0000FF ? 2 : -1; // BGR
	XFree(visualInfo);
	returnText->bpp = DisplayPlanes(display, DefaultScreen(display))/8;
	returnText->x = x;
	returnText->y = y;
	returnText->visible = true;
	returnText->fontSize = fontSize;
	memcpy(returnText->fgColor, fg, 3);
	memcpy(returnText->bgColor, bg, 3);
	returnText->kerning = fontSize;
	returnText->text = (char*)malloc(strlen(text)+1);
	memcpy(returnText->text, text, strlen(text)+1);
	returnText->byteWidth = returnText->kerning*strlen(text)*returnText->bpp+strlen(text)*returnText->bpp*fontSize*8;
	returnText->textbuffer = (char*)calloc(returnText->byteWidth*8*fontSize,1);
	returnText->pxwidth = returnText->byteWidth/returnText->bpp;
	returnText->pxheight = fontSize*8;
}

void _renderText(text_t* text){
	uint8_t *orderFg = (uint8_t*)malloc(text->bpp);
	uint8_t *orderBg = (uint8_t*)malloc(text->bpp);
	switch(text->subpixelOrder){
		case 0:
			memcpy(orderFg, text->fgColor, text->bpp);
			memcpy(orderBg, text->bgColor, text->bpp);
			break;
		case 1:
			orderFg[0] = text->fgColor[1];
			orderFg[1] = text->fgColor[2];
			orderFg[2] = text->fgColor[0];
			orderBg[0] = text->bgColor[1];
			orderBg[1] = text->bgColor[2];
			orderBg[2] = text->bgColor[0];
			break;
		case 2:
			for(int i = 0; i < text->bpp; i++){
				orderFg[2-i] = text->fgColor[i];
				orderBg[2-i] = text->bgColor[i];
			}
			break;
		default:
			fprintf(stderr, "Couldn't determine subpixels for display, defaulting to RGB");
			memcpy(orderFg, text->fgColor, text->bpp);
			memcpy(orderBg, text->bgColor, text->bpp);
			break;
	}
	for(int u = 0; u < text->byteWidth*text->fontSize*8; u+=text->bpp)
		memcpy(text->textbuffer+u, orderBg, text->bpp);
	for(uint8_t i = 0; text->text[i]; i++){ // each character
		for(int y = 0; y<8; y++){ // each row of the character
			for(int z = 0; z < text->fontSize; z++){ // how many times to draw that row
				int pos = i*8*text->fontSize*text->bpp + i*text->kerning*text->bpp + (y*text->fontSize+z)*text->byteWidth; // starting position for that row
				for(int j = 0; j<8; j++){ // each bit in the row
					//printf("%d", (letters[(text->text[i]&0x1F)-1][y]>>(7-j))&0x1);
					if((ascii[(unsigned char)text->text[i]][y]>>(7-j))&0x1) // if the current bit is a 1
						for(int u = 0; u < text->fontSize; u++)
							memcpy(text->textbuffer+(j*text->fontSize+u)*text->bpp+pos, orderFg, text->bpp);
				}
			}
		}
	}
	free(orderFg);
	free(orderBg);
}

#endif
